'From VisualWorks(R), Release 2.5.2 of September 26, 1995 on April 30, 2018 at 8:38:03 pm'!



Application create: #KRONO_Launch with: 
    (#( META)
        collect: [:each | Smalltalk at: each ifAbsent: [
        self error: 'Not all of the prerequisites are loaded']])!

KRONO_Launch becomeDefault!

ApplicationModel subclass: #KRONOLauncher
	instanceVariableNames: 'cacheModel major '
	classVariableNames: ''
	poolDictionaries: ''!

KRONO_Launch becomeDefault!

ApplicationModel subclass: #KRONOLauncherPanel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''!

KRONO_Launch becomeDefault!

ApplicationModel subclass: #KRONOPilotMessagesPanel
	instanceVariableNames: 'messageView '
	classVariableNames: ''
	poolDictionaries: ''!

KRONO_Launch becomeDefault!

ApplicationModel subclass: #KRONOPilotWindowsPanel
	instanceVariableNames: 'pilot windowsList inTransition '
	classVariableNames: ''
	poolDictionaries: ''!

KRONO_Launch becomeDefault!

RTApplicationModel subclass: #KRONOPilot
	classInstanceVariableNames: 'multiButtonsBar justReturnedFromSnapshot '
	instanceVariableNames: 'logged messageView lastLogoutTime currentlyOpenedProject defaultPath userName panelsModel panelsTabsModel alreadyUpdatedAfterOpening '
	classVariableNames: ''
	poolDictionaries: ''!

KRONO_Launch becomeDefault!

Application subclass: #KRONO_Launch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''!

KRONO_Launch becomeDefault!

!KRONOLauncher class publicMethodsFor: 'interface specs'!

windowSpec
	"UIPainter new openOnClass: self andSelector: #windowSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware' 
			#min: #(#Point 350 590 ) 
			#max: #(#Point 450 640 ) 
			#bounds: #(#Rectangle 0 0  350 590 ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#LabelSpec 
					#layout: #(#LayoutOrigin 0 0.583333 12 0 ) 
					#label: 'ware' 
					#style: #pixelDefault ) 
				#(#LabelSpec 
					#layout: #(#AlignmentOrigin 0 0.583333 12 0 1 0 ) 
					#label: 'K R O N O' ) 
				#(#OSPCardFileSpec 
					#layout: #(#LayoutFrame 20 0 50 0 -20 1 -12 1 ) 
					#name: #notebookID 
					#colors: 
					#(#LookPreferences 
						#setBackgroundColor: #(#ColorValue 8191 8191 5119 ) ) 
					#model: #major 
					#tabable: true 
					#binderSide: #bottom 
					#binderWidth: 0 
					#majorTabsOnRight: false 
					#rightInset: 2 
					#bottomInset: 270 
					#orientation: #bottomTopNone 
					#tabEnd: #beveledTab 
					#buttonLocation: 'Lower Right' 
					#verticalButtons: false 
					#horizontalButtons: false 
					#cached: true 
					#cacheSize: 4 
					#cacheModel: #cacheModel 
					#scrollTabs: false 
					#tabsAcross: 1 
					#layeredIndent: false ) ) ) )! !

!KRONOLauncher publicMethodsFor: 'aspects'!

cacheModel

	| someCanvases |
	cacheModel isNil ifFalse: [ ^cacheModel].

	someCanvases := OrderedCollection new.
	someCanvases 
		add: KRONOLauncherPanel->#historiasClinicasCanvasSpec;
		add: KRONOLauncherPanel->#facturacionAlquilerCanvasSpec;
		add: KRONOLauncherPanel->#facturacionClinicaCanvasSpec;
		add: KRONOLauncherPanel->#accesoriosUsuarioCanvasSpec;
		add: KRONOLauncherPanel->#configurationsCanvasSpec;
		add: KRONOLauncherPanel->#autorCanvasSpec;
		add: KRONOLauncherPanel->#soporteCanvasSpec;
		add: KRONOLauncherPanel->#engineeringUtilsCanvasSpec;
		yourself.

	cacheModel := someCanvases asValue.
	^cacheModel!

major
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."

	| aTabsList |

	major isNil ifFalse: [ ^major].

	aTabsList := List new.
	aTabsList 
		add: 'Historias Clinicas';
		add: 'Facturacion Alquiler';
		add: 'Facturacion Clinica';
		add: 'Accesorios Usuario';
		add: 'Configuraciones';
		add: 'Autor';
		add: 'Soporte';
		add: 'Desarrollo';
		yourself.

	major := SelectionInList with: aTabsList.

	^major! !

!KRONOLauncher publicMethodsFor: 'interface opening'!

postBuildWith: aBuilder

	(self builder componentAt: #notebookID) widget tabBar accelLabelAndIconTab.!

postOpenWith: aBuilder

	super postOpenWith: aBuilder.
	self major selectionIndex: 1.! !

!KRONOLauncherPanel class publicMethodsFor: 'interface specs'!

accesoriosUsuarioCanvasSpec
	"UIPainter new openOnClass: self andSelector: #accesoriosUsuarioCanvasSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware Accesorios Usuario' 
			#min: #(#Point 271 221 ) 
			#bounds: #(#Rectangle 486 314 757 535 ) 
			#colors: 
			#(#LookPreferences 
				#setBackgroundColor: #(#ColorValue 8191 8191 5119 ) ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 20 0 -20 1 50 0 ) 
					#model: #openKronowareAppBrowserStartingAtArchivoGeneral 
					#label: 'Navegar Archivo General' ) 
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 70 0 -20 1 100 0 ) 
					#colors: 
					#(#LookPreferences 
						#setBackgroundColor: #(#ColorValue #green ) ) 
					#model: #snapshot 
					#label: 'Grabar Estado Actual ...' ) 
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 170 0 -20 1 200 0 ) 
					#colors: 
					#(#LookPreferences 
						#setBackgroundColor: #(#ColorValue #red ) ) 
					#model: #quit 
					#label: 'Abandonar KRONOware ...' ) ) ) )!

autorCanvasSpec
	"UIPainter new openOnClass: self andSelector: #autorCanvasSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'Autor KRONOWare' 
			#min: #(#Point 286 232 ) 
			#max: #(#Point 461 286 ) 
			#bounds: #(#Rectangle 449 489 735 721 ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#LabelSpec 
					#layout: #(#Point 20 110 ) 
					#label: 'Todos los derechos reservados' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 135 ) 
					#label: 'Usted debe pagar al Autor' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 35 ) 
					#label: 'intelectual e industrial exclusiva' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 60 ) 
					#label: 'de Antonio Carrasco Valero' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 10 ) 
					#label: 'KRONOware es propiedad' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 85 ) 
					#label: 'autor con dni 24.334.236 (Spain)' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 160 ) 
					#label: 'para tener derecho a utilizar' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 185 ) 
					#label: 'el programa KRONOware.' ) ) ) )!

autorWindowSpec
	"UIPainter new openOnClass: self andSelector: #autorWindowSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware Soporte' 
			#min: #(#Point 290 299 ) 
			#max: #(#Point 290 299 ) 
			#bounds: #(#Rectangle 406 398 696 697 ) 
			#colors: 
			#(#LookPreferences 
				#setForegroundColor: nil 
				#setBackgroundColor: #(#ColorValue 8191 8191 5119 ) 
				#setSelectionForegroundColor: nil 
				#setSelectionBackgroundColor: nil 
				#setBorderColor: nil ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#LabelSpec 
					#layout: #(#LayoutOrigin 0 0.583333 12 0 ) 
					#label: 'ware' 
					#style: #pixelDefault ) 
				#(#LabelSpec 
					#layout: #(#AlignmentOrigin 0 0.583333 12 0 1 0 ) 
					#label: 'K R O N O' ) 
				#(#SubCanvasSpec 
					#layout: #(#LayoutFrame 10 0 60 0 -10 1 -10 1 ) 
					#flags: 0 
					#majorKey: #KRONOLauncherPanel 
					#minorKey: #autorCanvasSpec ) ) ) )!

configurationsCanvasSpec
	"UIPainter new openOnClass: self andSelector: #configuracionesCanvasSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware Configuraciones' 
			#min: #(#Point 271 221 ) 
			#bounds: #(#Rectangle 486 314 757 535 ) 
			#colors: 
			#(#LookPreferences 
				#setBackgroundColor: #(#ColorValue 8191 8191 5119 ) ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 70 0 -20 1 100 0 ) 
					#model: #openBrowsersConfigurationsBrowser 
					#label: 'Configuracion Navegadores' ) 
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 20 0 -20 1 50 0 ) 
					#model: #openDeveloperConfigurationsBrowser 
					#label: 'Configuracion Desarrollador' ) 
		) ) )!

engineeringUtilsCanvasSpec
	"UIPainter new openOnClass: self andSelector: #engineeringUtilsCanvasSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware Desarrollo' 
			#min: #(#Point 271 221 ) 
			#bounds: #(#Rectangle 609 368 880 589 ) 
			#colors: 
			#(#LookPreferences 
				#setBackgroundColor: #(#ColorValue 8191 8191 5119 ) ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 20 0 -20 1 50 0 ) 
					#model: #openKronowareAppBrowser 
					#label: 'Dominio Completo' ) 
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 70 0 -20 1 100 0 ) 
					#model: #openKronowareModelBrowser 
					#label: 'Modelo del Dominio' ) 
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 120 0 -20 1 150 0 ) 
					#model: #openVisualLauncher 
					#label: 'Lanzador Programacion' ) 
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 170 0 -20 1 200 0 ) 
					#colors: 
					#(#LookPreferences 
						#setBackgroundColor: #(#ColorValue #red ) ) 
					#model: #resetAllCurrentTranslationsModelsAndInfos 
					#label: 'Borrar Todo' ) ) ) )!

facturacionAlquilerCanvasSpec
	"UIPainter new openOnClass: self andSelector: #facturacionAlquilerCanvasSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware Facturacion Alquiler' 
			#min: #(#Point 271 202 ) 
			#bounds: #(#Rectangle 206 311 477 513 ) 
			#colors: 
			#(#LookPreferences 
				#setBackgroundColor: #(#ColorValue 8191 8191 5119 ) ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 120 0 -20 1 150 0 ) 
					#model: #openFacturacionAlquilerCatalogosTarifas 
					#label: 'Catalogo, Tarifas y Actual' )  
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 70 0 -20 1 100 0 ) 
					#model: #openFacturacionAlquilerClientes 
					#label: 'Clientes' ) 

				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 20 0 -20 1 50 0 ) 
					#model: #openFacturacionAlquilerFacturas 
					#label: 'Facturas {ejercicios.periodos}' ) 
				) ) )!

facturacionClinicaCanvasSpec
	"UIPainter new openOnClass: self andSelector: #facturacionClinicaCanvasSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware Facturacion Clinica' 
			#min: #(#Point 271 202 ) 
			#bounds: #(#Rectangle 206 311 477 513 ) 
			#colors: 
			#(#LookPreferences 
				#setBackgroundColor: #(#ColorValue 8191 8191 5119 ) ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 120 0 -20 1 150 0 ) 
					#model: #openFacturacionClinicaCatalogosTarifas 
					#label: 'Catalogo, Tarifas y Actual' ) 
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 70 0 -20 1 100 0 ) 
					#model: #openFacturacionClinicaOrigenesIntermediariosAseguradoras 
					#label: 'Origenes y Pagadores' ) 
			#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 20 0 -20 1 50 0 ) 
					#model: #openFacturacionClinicaFacturas 
					#label: 'Facturas {ejercicios.periodos}' ) 

	) ) )!

historiasClinicasCanvasSpec
	"UIPainter new openOnClass: self andSelector: #historiasClinicasCanvasSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware Facturacion Alquiler' 
			#min: #(#Point 271 202 ) 
			#bounds: #(#Rectangle 206 311 477 513 ) 
			#colors: 
			#(#LookPreferences 
				#setBackgroundColor: #(#ColorValue 8191 8191 5119 ) ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 20 0 -20 1 50 0 ) 
					#model: #openHistoriasClinicasHistorias 
					#label: 'Historias' ) 
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame 20 0 70 0 -20 1 100 0 ) 
					#model: #openHistoriasClinicasPersonalClinica 
					#label: 'Personal Clinica' ) ) ) )!

soporteCanvasSpec
	"UIPainter new openOnClass: self andSelector: #soporteCanvasSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'Soporte KRONOWare' 
			#min: #(#Point 286 238 ) 
			#max: #(#Point 461 286 ) 
			#bounds: #(#Rectangle 448 554 734 792 ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#LabelSpec 
					#layout: #(#Point 20 103 ) 
					#label: 'Tel. Europa  +34 96 383 6999' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 133 ) 
					#label: 'Tel. EEUU    +1 305 252 9681' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 163 ) 
					#label: 'Correo carrascv@telocity.com' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 193 ) 
					#label: 'Web        www.dosmil-e.com' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 40 ) 
					#label: 'proporcionado por su Autor' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 70 ) 
					#label: 'Antonio Carrasco Valero' ) 
				#(#LabelSpec 
					#layout: #(#Point 20 10 ) 
					#label: 'Soporte KRONOware' ) ) ) )!

soporteWindowSpec
	"UIPainter new openOnClass: self andSelector: #soporteWindowSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware Soporte' 
			#min: #(#Point 290 299 ) 
			#max: #(#Point 290 299 ) 
			#bounds: #(#Rectangle 406 398 696 697 ) 
			#colors: 
			#(#LookPreferences 
				#setForegroundColor: nil 
				#setBackgroundColor: #(#ColorValue 8191 8191 5119 ) 
				#setSelectionForegroundColor: nil 
				#setSelectionBackgroundColor: nil 
				#setBorderColor: nil ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#LabelSpec 
					#layout: #(#LayoutOrigin 0 0.583333 12 0 ) 
					#label: 'ware' 
					#style: #pixelDefault ) 
				#(#LabelSpec 
					#layout: #(#AlignmentOrigin 0 0.583333 12 0 1 0 ) 
					#label: 'K R O N O' ) 
				#(#SubCanvasSpec 
					#layout: #(#LayoutFrame 10 0 60 0 -10 1 -10 1 ) 
					#flags: 0 
					#majorKey: #KRONOLauncherPanel 
					#minorKey: #soporteCanvasSpec ) ) ) )!

windowSpec
	"UIPainter new openOnClass: self andSelector: #windowSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware' 
			#min: #(#Point 350 590 ) 
			#max: #(#Point 450 640 ) 
			#bounds: #(#Rectangle 0 0  350 590 ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#LabelSpec 
					#layout: #(#LayoutOrigin 0 0.583333 12 0 ) 
					#label: 'ware' 
					#style: #pixelDefault ) 
				#(#LabelSpec 
					#layout: #(#AlignmentOrigin 0 0.583333 12 0 1 0 ) 
					#label: 'K R O N O' ) 
				 ) ) )! !

!KRONOLauncherPanel publicMethodsFor: 'actions'!

openBrowsersConfigurationsBrowser
	
	KRUIConfigurationsBrowser open!

openDeveloperConfigurationsBrowser
	
	KRUIConfigurationsBrowser open!

openFacturacionAlquilerCatalogosTarifas

	KRSimpleInfoHolder browseCurrentWholeModelStartingAtFacturacionAlquilerCatalogosTarifas!

openFacturacionAlquilerCatalogosYTarifas

	KRSimpleInfoHolder browseCurrentWholeModelStartingAtFacturacionAlquilerCatalogosTarifas!

openFacturacionAlquilerClientes

	KRSimpleInfoHolder browseCurrentWholeModelStartingAtFacturacionAlquilerClientes!

openFacturacionAlquilerFacturas

	KRSimpleInfoHolder browseCurrentWholeModelStartingAtFacturacionAlquilerFacturas!

openFacturacionClinicaCatalogosTarifas

	KRSimpleInfoHolder browseCurrentWholeModelStartingAtFacturacionClinicaCatalogosTarifas!

openFacturacionClinicaClientes

	KRSimpleInfoHolder 	browseCurrentWholeModelStartingAtFacturacionClinicaOrigenesIntermediariosAseguradoras!

openFacturacionClinicaFacturas

	KRSimpleInfoHolder browseCurrentWholeModelStartingAtFacturacionClinicaFacturas!

openFacturacionClinicaOrigenesIntermediariosAseguradoras

	KRSimpleInfoHolder browseCurrentWholeModelStartingAtFacturacionClinicaOrigenesIntermediariosAseguradoras!

openHistoriasClinicasHistorias

	KRSimpleInfoHolder browseCurrentWholeModelStartingAtHistoriasClinicasHistorias!

openHistoriasClinicasPersonalClinica

	KRSimpleInfoHolder browseCurrentWholeModelStartingAtHistoriasClinicasPersonalClinica!

openKronowareAppBrowser

	KRSimpleInfoHolder browseCurrentWholeModel!

openKronowareAppBrowserStartingAtArchivoGeneral

	KRSimpleInfoHolder browseCurrentWholeModelStartingAtArchivoGeneral.!

openKronowareModelBrowser

	KRSimpleMetaInfoHolder currentModel browsePath!

openVisualLauncher
	
	VisualLauncher open!

quit

	(Dialog confirm: ('Desea ABANDONAR KRONOware \',
		'y perder todos los cambios desde la ultima grabacion  ?')withCRs initialAnswer: false)  ifFalse: [ ^self].
	
	(Dialog confirm: ('Realmente desea ABANDONAR KRONOware \',
		'y perder todos los cambios desde la ultima grabacion  ?' ) withCRs initialAnswer: false)  ifFalse: [ ^self].
	

	ObjectMemory quit!

resetAllCurrentTranslationsModelsAndInfos

	(Dialog confirm: ('Desea ELIMINAR toda la informacion en KRONOware\',
		'y devolver el Modelo, Pantallas y traducciones al estado original ?')withCRs initialAnswer: false)  ifFalse: [ ^self].
	
	(Dialog confirm: ('Realmente desea ELIMINAR toda la informacion en KRONOware\',
		'y devolver el Modelo, Pantallas y traducciones al estado original ?' ) withCRs initialAnswer: false)  ifFalse: [ ^self].
	

	TranslationsPersistencyHolder resetAllCurrentTranslationsNoDialog.
	CMMetaInfoPersistencyHolder resetAllCurrentModelsNoDialog.
	CMInfoPersistencyHolder resetAllCurrentInfosNoDialog.
self halt.
	CMDefinedUIPersistencyHolder resetAllCurrentDefinedUIsNoDialog.!

snapshot
	
	| aPrematureExitBlock aNameRoot aNameTermination aFileSystemMatchString aFileSystemFilePostfixSeparator aMatchTemplate someExistingFileNames anIndex aMaxIndex aNumber aNewIndex aNewFileName aSnapshotName aFilename |
	aPrematureExitBlock := [
		Dialog warn: 'La grabacion de "instantanea" del estado de KRONOware has sido cancelada'.
		^nil
	].

	(Dialog confirm: 
		'Realmente desea Grabar una instantanea del estado actual de KRONOware ?' initialAnswer: false) ifFalse: [ 
		aPrematureExitBlock value
	].

	aNameRoot := 'KRONOware_instantanea_'.
	aNameTermination := 'im'.
	aFileSystemMatchString := '*'.
	aFileSystemFilePostfixSeparator := '.'.

	aMatchTemplate := aNameRoot, aFileSystemMatchString, aFileSystemFilePostfixSeparator, aNameTermination.

	someExistingFileNames := Filename filesMatching: aMatchTemplate.
	anIndex := someExistingFileNames isEmpty
		ifTrue: [ 0]
		ifFalse: [ 
			someExistingFileNames size > 32 ifTrue: [ 
				Dialog warn: ('Usted ya tiene archivadas ', someExistingFileNames size printString, ' instantaneas.\',
					'Recuerde que estas instantaneas ocupan espacio en disco\',
					'La grabacion de instantanea va a continuar verificando y grabando ...') withCRs.
			].
			aMaxIndex := 0.
			someExistingFileNames do: [:aFileName |
				aNumber := Object errorSignal handle: [:anEx | anEx returnWith: 0]
					do: [ Number readFrom: (aFileName copyFrom: aNameRoot size + 1 to: aFileName size) readStream].
				aNumber > aMaxIndex ifTrue: [ aMaxIndex := aNumber].
			].
			aMaxIndex
		].

	aNewIndex := anIndex.
	[
		aNewIndex := aNewIndex + 1.
		aNewFileName := aNameRoot, aNewIndex printString, aFileSystemFilePostfixSeparator, aNameTermination.
		aNewFileName asFilename exists
	] whileTrue.
	
	[
		aSnapshotName := Dialog request: 'Por favor, introduzca un nombre de fichero instantanea a grabar' initialAnswer: aNewFileName.
		(aSnapshotName isNil or: [ aSnapshotName trimBlanks isEmpty]) ifTrue: [  aPrematureExitBlock value].

		aFilename := Object errorSignal 
			handle: [:anEx | anEx returnWith: nil]
			do: [ aSnapshotName asFilename].
		aFilename isNil
			ifTrue: [ 
				(Dialog 
					confirm: 'Ha introducido un nombre de fichero incorrecto.\Desea volver a intentarlo ?' withCRs
					initialAnswer: true) ifFalse: [ aPrematureExitBlock value].
				false
			]
			ifFalse: [
				aFilename exists 
					ifTrue: [ 
						(Dialog 
							confirm: 'Ha introducido un nombre de fichero ya existente.\Desea volver a intentarlo ?' withCRs
							initialAnswer: true) ifFalse: [ aPrematureExitBlock value].
						false
					]
					ifFalse: [ true]
			].
	] whileFalse.


	(Dialog confirm: 
		('KRONOware va a grabar una instantanea de su estado en el fichero \\', aSnapshotName ,
		'\ \Desea realmente grabar la instantanea ?') withCRs initialAnswer: true) ifFalse: [  aPrematureExitBlock value].

	"ObjectMemory snapshot: aNewFileName"


	Dialog warn: 
		('KRONOware ha grabado una instantanea de su estado en el fichero \\', aSnapshotName ,
		'\ \Por favor tome nota de este nombre y la situacion o incidencia observada.\Muchas gracias.') withCRs.! !

!KRONOPilot class publicMethodsFor: 'assistant'!

pathsStoreGlobal
	| aPathsStoreClass  |

	aPathsStoreClass := self preferredPathsStoreClass.
	aPathsStoreClass isNil ifTrue: [^nil].

	^aPathsStoreClass pathsStoreGlobal! !

!KRONOPilot class publicMethodsFor: 'button indexes accessing'!

newProjectButtonIndex
	^2!

openProjectButtonIndex
	^3!

saveProjectButtonIndex
	^4! !

!KRONOPilot class publicMethodsFor: 'class initializing'!

buildButtonsBarFromVisuals: symbols andActions: selectors

	| aMenu help |
	buttonsBar := OrderedCollection new.
	symbols with: selectors do: [:symbol :action | 
		buttonsBar add: ((HWActionBarButton new)
						visual: (self visualIconNamed: symbol);
						 model: action)].
	(30 - buttonsBar size) timesRepeat: [ 
		buttonsBar add: ((HWActionBarButton new)
						visual: (self visualIconNamed: #space);
						 model: #yourself) ].
	aMenu := self menuBar asDictionaryValueHelp.
	buttonsBar do:  [:each | 
		help := aMenu at: each model ifAbsent: [''].
		each help: help]
"*VIPVersion  'Anonymous Version from Changes File'*"!

buildMultiButtonsBarFromVisuals: symbols andActions: selectors
 
	| aMenu help | 
	multiButtonsBar := OrderedCollection new.
	symbols with: selectors do: [:symbol :action | 
		multiButtonsBar add: ((HWActionBarButton new)
						visual: (self visualIconNamed: symbol);
						 model: action)].
	(30 - buttonsBar size) timesRepeat: [ 
		multiButtonsBar add: ((HWActionBarButton new)
						visual: (self visualIconNamed: #space);
						 model: #yourself) ].
	aMenu := self menuBar asDictionaryValueHelp.
	multiButtonsBar do:  [:each | 
		help := aMenu at: each model ifAbsent: [''].
		each help: help]
"*VIPVersion 3-5-96 | 2:03:57 pm 'ACV'*"!

initialize
	"KRONOPilot initialize"

	self initializeSpecificVisualIcons.
	self initializeButtonsBar!

initializeButtonsBar

	"self initializeSpecificVisualIcons. self initializeButtonsBar"

	self	buildButtonsBarFromVisuals:  
		#(#close #space
			#new #open #save #space 
			#questionMark #space
			#refresh)
		andActions:  #(#quit #yourself
			#newProjectMono #openProjectMono #saveProjectMono #yourself 
			#help #yourself
			#refreshWindow).

	self	buildMultiButtonsBarFromVisuals:  
		#(#close #space
			#new #open #save #space 
			#questionMark #space
			#refresh)
		andActions:  #(#quit #yourself
			#newProjectMulti #openProjectMulti #commitMulti #yourself 
			#help #yourself
			#refreshWindow)!

initializeSpecificVisualIcons

	specificVisualIcons := HWOrderedDictionary new.
	specificVisualIcons at: #refresh put: (HWUIButtonsBarBuilder visualIconNamed: #refresh)! !

!KRONOPilot class publicMethodsFor: 'constants'!

saveDefaultPathFileName
	^'Clinica_KRONOware.krono' copy! !

!KRONOPilot class publicMethodsFor: 'generated resources'!

littleQuitIconAndLabel
	^(LabelAndIcon with: 'Close' asText allBold) icon: self littleQuitIcon! !

!KRONOPilot class publicMethodsFor: 'interface specs'!

aboutSpec
	^KRONOLauncherPanel autorCanvasSpec!

technicalSupportSpec

	^KRONOLauncherPanel soporteCanvasSpec!

windowSpec
	"UIPainter new openOnClass: self andSelector: #windowSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware menu' 
			#min: #(#Point 487 236 ) 
			#bounds: #(#Rectangle 255 248 833 632 ) 
			#flags: 4 
			#menu: #menuBar 
			#colors: 
			#(#LookPreferences 
				#setForegroundColor: #(#ColorValue #black ) 
				#setBackgroundColor: #(#ColorValue #white ) 
				#setSelectionForegroundColor: #(#ColorValue #white ) 
				#setSelectionBackgroundColor: #(#ColorValue #black ) 
				#setBorderColor: #(#ColorValue #black ) ) ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#RegionSpec 
					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 ) 
					#isOpaque: true 
					#colors: 
					#(#LookPreferences 
						#setBackgroundColor: #(#ColorValue 6553 6553 6553 ) ) ) 
				#(#OSPCardFileSpec 
					#layout: #(#LayoutFrame 5 0 35 0 -5 1 -35 1 ) 
					#name: #panelsTabsID 
					#colors: 
					#(#LookPreferences 
						#setBackgroundColor: #(#ColorValue #white ) ) 
					#model: #panelsTabsModel 
					#tabable: true 
					#binderSide: #bottom 
					#binderWidth: 0 
					#majorTabsOnRight: false 
					#rightInset: 2 
					#bottomInset: 20 
					#orientation: #bottomTopNone 
					#tabEnd: #beveledTab 
					#buttonLocation: 'Lower Right' 
					#verticalButtons: false 
					#horizontalButtons: false 
					#cached: true 
					#cacheSize: 2 
					#cacheModel: #panelsModel 
					#scrollTabs: false 
					#tabsAcross: 2 
					#layeredIndent: false ) 
				#(#InputFieldSpec 
					#layout: #(#LayoutFrame 5 0 -30 1 -95 1 -5 1 ) 
					#name: #HelpHolderID 
					#colors: 
					#(#LookPreferences 
						#setForegroundColor: #(#ColorValue #black ) 
						#setBackgroundColor: #(#ColorValue 6553 6553 6553 ) ) 
					#model: #helpHolder 
					#tabable: false 
					#style: #default 
					#isReadOnly: true ) 
				#(#ActionButtonSpec 
					#layout: #(#LayoutFrame -90 1 -30 1 -5 1 -5 1 ) 
					#name: #CloseButtonID 
					#model: #quit 
					#label: #littleQuitIconAndLabel 
					#hasCharacterOrientedLabel: false ) ) ) )! !

!KRONOPilot class publicMethodsFor: 'menu accessing'!

ayudaMenuIndex
	^6!

clinicaMenuIndex
	^2!

facturacionMenuIndex
	^4!

historiasMenuIndex
	^3!

kronoWareMenuIndex
	^1!

sistemaMenuIndex
	^5! !

!KRONOPilot class publicMethodsFor: 'mono menu accessing'!

kronoWareCloseMonoMenuItemIndex
	^7!

kronoWareLoginLogoutMonoMenuItemIndex
	^1!

kronoWareNewMonoMenuItemIndex
	^2!

kronoWareOpenMonoMenuItemIndex
	^3!

kronoWarePostLoginMonoMenuItemIndexes
	^Array 
		with: self kronoWareNewMonoMenuItemIndex
		with: self kronoWareOpenMonoMenuItemIndex!

kronoWarePostOpenMonoMenuItemIndexes
	^Array 
		with: self kronoWareSaveMonoMenuItemIndex
		with: self kronoWareSaveAsMonoMenuItemIndex
		with: self kronoWareCloseMonoMenuItemIndex!

kronoWarePreLoginMonoMenuItemIndexes
	^Array with: self kronoWareLoginLogoutMonoMenuItemIndex!

kronoWareQuitMonoMenuItemIndex
	^8!

kronoWareSaveAsMonoMenuItemIndex
	^5!

kronoWareSaveMonoMenuItemIndex
	^4!

kronoWareSnapshotMonoMenuItemIndex
	^6!

loginMonoMenuItemHelp
	^'Conectar el usuario a una sesion KRONOware' copy!

loginMonoMenuItemLabel
	^'Conectar'!

loginMonoMenuItemSelector
	^#doLoginMono!

logoutMonoMenuItemHelp
	^'Desconectar el Usuario de la sesion KRONOware'!

logoutMonoMenuItemLabel
	^'Desconectar' copy!

logoutMonoMenuItemSelector
	^#doLogoutMono!

postLoginMonoMenuItemIndexes
	^Array new!

postOpenMonoMenuItemIndexes
	^Array 
		with: self clinicaMenuIndex
		with: self historiasMenuIndex
		with: self facturacionMenuIndex!

sistemaConfiguracionItemIndex
	^2!

sistemaInspectItemIndex
	^2!

sistemaOpenKronowareAppBrowserItemIndex
	^2!

sistemaOpenKronowareModelBrowserItemIndex
	^3!

sistemaOpenVisualLauncherItemIndex
	^4!

sistemaPostLoginMonoMenuItemIndexes
	^Array 
		with: self sistemaOpenKronowareModelBrowserItemIndex
		with: self sistemaOpenVisualLauncherItemIndex
		with: self sistemaResetAllCurrentTranslationsModelsAndInfosItemIndex
		with: self sistemaInspectItemIndex!

sistemaPostOpenMonoMenuItemIndexes
	^Array 
		with: self sistemaOpenKronowareAppBrowserItemIndex!

sistemaPreLoginMonoMenuItemIndexes
	^Array 
		with: self sistemaSnapshotMonoMenuItemIndex!

sistemaResetAllCurrentTranslationsModelsAndInfosItemIndex
	^4!

sistemaSnapshotMonoMenuItemIndex
	^1! !

!KRONOPilot class publicMethodsFor: 'opening'!

inactiveDefaultPilotWith: aTextCollector
	"Create the Pilot using aTextCollector but don't open it.  Answer the window."

	| aPilot aWindow |
	aPilot :=self new.
	aWindow := (aPilot allButOpenInterface: #windowSpec) window.
	aWindow moveTo: 20@60.
	^aWindow! !

!KRONOPilot class publicMethodsFor: 'preferences'!

preferredConfigurationsBrowserClass

	^KRUIConfigurationsBrowser!

preferredEditorsOpenerClass

	^KRUIEditorsOpener!

preferredPathsStoreClass

	^MASSPathsStore!

preferredProjectClass
	^KRONOProject! !

!KRONOPilot class publicMethodsFor: 'preferences-mngmnt'!

loadPreferences
	"IAALP2PIlot loadPreferences"

	| bos prefs |
	'ibee.prf' asFilename exists ifFalse: [^nil].
	self errorSignal
		handle: 
			[:ex | 
			OMTDialog warn: 'Corrupted Preferences file' asLPString.
			InputState default shiftDown ifTrue: [self error: 'Bad File !!']]
		do: 
			[bos := BinaryObjectStorage onOld: 'ibee.prf' asFilename readStream.
			[prefs := bos next]
				valueNowOrOnUnwindDo: [bos close].
			prefs do: [:each | each apply]]
"*VIPVersion  'Anonymous Version from Changes File'*"!

savePreferences
	"IAALP2Pilot savePreferences"
	| prefs bos |
	prefs := #(  HWPrinterPreferences )
				collect: [:cn | (Smalltalk at: cn) new read].

	bos := BinaryObjectStorage onNew: 'ibee.prf' asFilename writeStream.
	bos sourceMode: #discard.
	[bos nextPut: prefs ]
		valueNowOrOnUnwindDo: [ bos close ]
"*VIPVersion  'Anonymous Version from Changes File'*"! !

!KRONOPilot class publicMethodsFor: 'private'!

closeAllEditorsBut: theObject
	| anEditorsOpener |
	anEditorsOpener := self editorsOpener.
	anEditorsOpener isNil ifFalse: [
		anEditorsOpener closeAllEditorsBut: theObject]!

copyMenuFrom: theMenu

	^theMenu copy!

editorsOpener

	^self preferredEditorsOpenerClass  editorsOpener!

projectNamed: theProjectName

	| anIAAProjectSystem |
	theProjectName isNil ifTrue: [^nil].

	anIAAProjectSystem := self projectsSystem.
	anIAAProjectSystem isNil ifTrue: [^nil].

	^anIAAProjectSystem projects detect: [:aPrj | aPrj name = theProjectName ] ifNone: [nil].!

projectsSystem
MASSOjo ojoSysModif.

	^self preferredProjectSystemClass projectsSystem
"*VIPVersion 30-4-96 | 12:38:19 am 'Anonymous'*"!

removeDanglingDependents

	CODEElement huntInDependents!

systemToCleanState
	ObjectMemory verboseGlobalCompactingGC.! !

!KRONOPilot class publicMethodsFor: 'resources'!

alquilerMenu

	| aMenu |
	aMenu := HWHelpPopUpMenu 
		labelList: #(
			('_Facturas {ejercicios.periodos}' ) ('Clientes' ) ('Catalogo Tarifas y Actual'))
		values:  #(
			#openFacturacionAlquilerFacturas
			#openFacturacionAlquilerClientes
			#openFacturacionAlquilerCatalogosTarifas
		).

	aMenu helps: #(
		'Navegar las Facturas de la Alquiler en KRONOware por ejercicios y periodos de facturacion'
		'Navegar los clientes de alquileres de la Clinica'
		'Navegar los catalogos de conceptos clinicos facturables, tarifas de precios y la tarifa actual'
	).

	^aMenu!

ayudaMenu

	| aMenu |
	aMenu := HWHelpPopUpMenu 
		labelList: #(
			('_Soporte' ) ( '_Autor' ) ('A_yuda'))
		values:  #(
			#openSoporteNotice
			#openAutorNotice
			#help
		).

	aMenu helps: #(
		'Mostrar la informacion para obtener soporte acerca de KRONOware'
		'Mostrar la informacion de Autor y Derechos y Restricciones de uso de KRONOware'
		'Mostrar las ayudas de KRONOware'
	).

	^aMenu!

buttonsBar

	^buttonsBar!

clinicaMenu

	| aMenu |
	aMenu := HWHelpPopUpMenu 
		labelList: #(
			('_Razon Social y direccion') ( '_Personal' '_Departamentos' ) ( 'Guardias'))
		values:  #(
			#openRazonSocialClinica
			#openPersonalClinica
			#openDepartamentosClinica
			#openCalendarioGuardiasClinica
		).

	aMenu helps: #(
		'Navegar los datos de la Clinica'
		'Navegar datos del Personal de la Clinica'
		'Navegar datos de los Departamentos de la Clinica'
		'Navegar el Calendario de Guardias de la Clinica'
	).

	^aMenu!

facturacionMenu

	| aMenu |
	aMenu := HWHelpPopUpMenu 
		labelList: #(
			( 'Tarifas Clinica' '_Pagadoras Prestaciones' '_Gestoras' '_Origenes Pacientes' 'Facturas _Clinica' )
			( 'Tarifas Alquiler' 'A_rrendatarios' 'Facturas Al_quiler' ))
		values:  #(
			#openFacturacionClinicaCatalogosTarifas
			#openFacturacionClinicaAseguradoras
			#openFacturacionClinicaIntermediarios
			#openFacturacionClinicaOrigenesPacientes
			#openFacturacionClinicaFacturas
			#openFacturacionAlquilerCatalogosTarifas
			#openFacturacionAlquilerClientes
			#openFacturacionAlquilerFacturas
		).

	aMenu helps: #(
		'Navegar los catalogos de conceptos clinicos facturables, tarifas de precios y la tarifa actual'
		'Navegar las organizaciones Pagadoras de las prestaciones'
		'Navegar las organizaciones Gestoras del Pago de Prestaciones'
		'Navegar las organizaciones Origen de Pacientes'
		'Navegar las Facturas de la Clinica en KRONOware por ejercicios y periodos de facturacion'
		'Navegar los catalogos de conceptos clinicos facturables, tarifas de precios y la tarifa actual'
		'Navegar los clientes de alquileres de la Clinica'
		'Navegar las Facturas de la Alquiler en KRONOware por ejercicios y periodos de facturacion'
	).

	^aMenu!

helpMenu
	"self helpMenu startUp"

	^#(#HWHelpPopUpMenu #('A_yuda' '_Autor' '_Soporte') #(1 2 ) #( #help #about #techSupport) #('Obtener Ayuda acerca de KRONOware' 'Informacion acerca del Autor, Derechos y Limitaciones de Uso de KRONOware' 'Obtener soporte acerda de KRONOware') ) decodeAsLiteralArray!

historiasMenu

	| aMenu |
	aMenu := HWHelpPopUpMenu 
		labelList: #(
			('_Historias'  '_Busqueda') 
			( ' _Calendario Visitas')
			('_Enfermedades' '_Procedimientos' '_Substancias'))
		values:  #(
			#openHistoriasClinicasHistorias
			#openHistoriasClinicasBusquedas
			#openCalendarioVisitas
			#openCodificacionEnfermedades
			#openCodificacionProcedimientos
			#openCodificacionSubstancias
		).

	aMenu helps: #(
		'Navegar las Historias Clinicas en KRONOware'
		'Buscar Historias Clinicas en KRONOware'
		'Navegar el calendario de visitas'
		'Navegar los codigos de Enfermedades'
		'Navegar los codigos de Procedimientos'
		'Navegar los codigos de Substancias'
	).

	^aMenu!

itselfMenu 
	^#(#HWHelpPopUpMenu #('Itself' ) #() #(#(#HWHelpPopUpMenu #('Inspeccionar' ) #( ) #(#inspectItself  ) #(''  ) ) ) #('' ) ) decodeAsLiteralArray!

kronoWareMenuMono

	| aMenu |
	aMenu := HWHelpPopUpMenu 
		labelList: #(
			('_Conectar')
			('_Nueva Clinica' ) ( '_Abrir Clinica...' '_Grabar' 'Grabar con otro nombre...' 'Grabar Instantanea') 
			( 'Cerrar')
			('Salir'))
		values:  #(
			#doLoginMono
			#newProjectMono
			#openProjectMono
			#saveProjectMono
			#saveAsProjectMono
			#snapshot
			#closeProjectMono
			#quit ).

	aMenu helps: #(
		'Conectar el Usuario a una sesion KRONOware'
		'Crear una nueva Clinica KRONOware'
		'Leer una Clinica KRONOware desde un fichero'
		'Grabar la Clinica KRONOware actual en su fichero'
		'Grabar la Clinica KRONOware actual en un fichero diferente'
		'Grabar el estado actual del KRONOware, para posterior comentario, continuacion, recuperacion'
		'Cerrar la Clinica KRONOware actual'
		'Abandonar KRONOWare' ).

	^aMenu!

menuBar
	| aMenu |
	
			aMenu := HWHelpPopUpMenu 
				labelArray: #('_KRONOWare'  '_Clinica' '_Historias'  '_Facturas' '_Sistema' '_Ayuda')  copy
				lines: #()
				values: (OrderedCollection new  
					add: self kronoWareMenuMono;
					add: self clinicaMenu;
					add: self historiasMenu;
					add: self facturacionMenu;
					add: self sistemaMenu;
					add: self ayudaMenu;
					yourself)
				helps: #('' ).

	^aMenu!

sistemaMenu

	| aMenu |
	aMenu := HWHelpPopUpMenu 
		labelList: #(
			('_Configuraciones')
			('_Dominio'  '_Modelo ' '_Programacion' '_Inspeccionar') 
			( 'Borrar'))
		values:  #(
			#openBrowsersConfigurationsBrowser
			#openKronowareAppBrowser
			#openKronowareModelBrowser
			#openVisualLauncher
			#inspectItself
			#resetAllCurrentTranslationsModelsAndInfos

		).

	aMenu helps: #(
		'Examinar las configuraciones de parametros que afectan al comportamiento de KRONOware'
		'Navegar el Dominio Completo de objetos de la Clinica KRONOware actual'
		'Navegar el Modelo del Dominio de objetos de KRONOware'
		'Abrir la ventana de accso a herramientas de programacion'
		'Inspeccionar la ventana Menu de KRONOware'
		'Eliminar toda la informacion en KRONOware (totalmente destructivo !!)'
	).

	^aMenu! !

!KRONOPilot class publicMethodsFor: 'snapshot'!

justReturnedFromSnapshot
	^justReturnedFromSnapshot == true!

justReturnedFromSnapshot: theValue
	justReturnedFromSnapshot := theValue == true! !

!KRONOPilot class publicMethodsFor: 'specificvisualIcons'!

specificVisuals

	specificVisualIcons == nil ifTrue: [self initializeSpecificVisualIcons].
	^specificVisualIcons!

visualIconNamed: aSymbol

	| visual |
	visual := HWUIButtonsBarBuilder visualIconNamed: aSymbol.
	visual == nil ifFalse: [^visual].
	Screen default colorPalette isMonochrome
		ifTrue: [ ^(self specificVisuals at: aSymbol) first ]
		ifFalse: [ ^(self specificVisuals at: aSymbol) last ]! !

!KRONOPilot class publicMethodsFor: 'VERSION'!

collaborators

	^'KRONOWARE.\Purificacion Carrasco-Valero, Scientific Requirements Specification.\Antonio Carrasco-Valero, Application Design and Development.' withCRs asValue!

versionText

	^'KronoWare	version :  0.8' asText allBold! !

!KRONOPilot publicMethodsFor: 'accessing'!

collaborators


	^self class collaborators
"*VIPVersion 25-4-96 | 1:38:23 pm 'GBL'*"!

currentlyOpenedProject
	^currentlyOpenedProject
"*VIPVersion  'Anonymous Version from Changes File'*"!

currentlyOpenedProject: theProject
	currentlyOpenedProject := theProject.
	"theProject isNil ifFalse: [ 
		theProject folder isNil ifFalse: [ self defaultPath: theProject folder]]"!

defaultPath
	^defaultPath!

defaultPath: thePath
	| aPath |
	aPath := thePath isNil ifTrue: [ '']  ifFalse: [ thePath].

	defaultPath := aPath.
	self saveDefaultPath!

helpFileNames
	| col |
	col := OrderedCollection new.
	col add: ('IBEE/IAA' -> 'ibeeiaa.hlp').
	^col asArray
"*VIPVersion  'Anonymous Version from Changes File'*"!

isLogged

	^self logged value == true
"*VIPVersion  'Anonymous Version from Changes File'*"!

logged

	^logged isNil ifTrue: [logged := false asValue] ifFalse: [logged]
"*VIPVersion  'Anonymous Version from Changes File'*"!

logged: aBoolean

	self logged value: aBoolean == true!

saveDefaultPath
	| aPath aSaveDefaultPathFileName aStream |
	aPath := self defaultPath.
	aPath isNil ifTrue: [ ^self].

	aSaveDefaultPathFileName := self saveDefaultPathFileName.
	aSaveDefaultPathFileName isNil ifTrue: [ ^self].

	[
		aStream := aSaveDefaultPathFileName asFilename writeStream.
		aStream nextPutAll: aPath; cr
	] valueNowOrOnUnwindDo: [ aStream isNil ifFalse: [ aStream close]]!

userName
	^userName!

userName: theUserName
	userName := theUserName!

versionText
	^self class versionText asValue
"*VIPVersion  'Anonymous Version from Changes File'*"! !

!KRONOPilot publicMethodsFor: 'actions'!

about
	KRONOLauncherPanel openWithSpec: #autorCanvasSpec!

help

	Dialog warn: 
		'Por favor, contacte Soporte tecnico\para realizar cualquier consulta\y recibir un manual de instrucciones'
		withCRs.
	self techSupport!

newProject
	^self newProjectMono!

openAuthorNotice

	KRONOLauncherPanel openWithSpec: #authorWindowSpec!

openAutorNotice

	KRONOLauncherPanel openWithSpec: #autorWindowSpec!

openBrowsersConfigurationsBrowser
	
	KRUIConfigurationsBrowser open!

openCodificacionEnfermedades
Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseCodificacionEnfermedades
]!

openCodificacionProcedimientos

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseCodificacionProcedimientos
]!

openCodificacionSubstancias

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseCodificacionSubstancias
]!

openConfiguration


Cursor wait showWhile: [ 
	self preferredConfigurationsBrowserClass open
]!

openDepartamentosClinica

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseDepartamentosClinica
]!

openDeveloperConfigurationsBrowser
	
Cursor wait showWhile: [ 
	KRUIConfigurationsBrowser open
]!

openFacturacionAlquilerCatalogosTarifas

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseFacturacionAlquilerCatalogosTarifas
]!

openFacturacionAlquilerCatalogosYTarifas

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseFacturacionAlquilerCatalogosTarifas
]!

openFacturacionAlquilerClientes

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseFacturacionAlquilerClientes
]!

openFacturacionAlquilerFacturas

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseFacturacionAlquilerFacturas
]!

openFacturacionClinicaAseguradoras

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseFacturacionClinicaAseguradoras
]!

openFacturacionClinicaCatalogosTarifas

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseFacturacionClinicaCatalogosTarifas
]!

openFacturacionClinicaFacturas

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseFacturacionClinicaFacturas
]!

openFacturacionClinicaIntermediarios

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseFacturacionClinicaIntermediarios
]!

openFacturacionClinicaOrigenesIntermediariosAseguradoras

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseFacturacionClinicaOrigenesIntermediariosAseguradoras
]!

openFacturacionClinicaOrigenesPacientes

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseFacturacionClinicaOrigenesPacientes
]!

openHistoriasClinicasBusquedas

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseHistoriasClinicasHistorias
]!

openHistoriasClinicasHistorias

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseHistoriasClinicasHistorias
]!

openHistoriasClinicasPersonalClinica

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseHistoriasClinicasPersonalClinica
]!

openKronowareAppBrowser

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseCurrentWholeModel
]!

openKronowareAppBrowserStartingAtArchivoGeneral

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseArchivoGeneral.
]!

openKronowareModelBrowser

Cursor wait showWhile: [ 
	KRSimpleMetaInfoHolder currentModel browsePath
]!

openOrganizacionYPersonalClinica

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseOrganizacionYPersonalClinica
]!

openPersonalClinica

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browsePersonalClinica
]!

openProject
	^self openProjectMono!

openQuickAssistantBrowser!

openRazonSocialClinica

Cursor wait showWhile: [ 
	KRSimpleInfoHolder browseRazonSocialYDireccionClinica
]!

openSoporteNotice

	KRONOLauncherPanel openWithSpec: #soporteWindowSpec!

openSupportNotice

	KRONOLauncherPanel openWithSpec: #supportWindowSpec!

openVisualLauncher
	
	VisualLauncher open!

quit

	(Dialog confirm: 'Desea ABANDONAR KRONOware ?' withCRs initialAnswer: false)  ifFalse: [ ^self].
	(Dialog confirm: 'Realmente desea ABANDONAR KRONOware ?'  withCRs initialAnswer: false)  ifFalse: [ ^self].

	self closeRequest.
	
	DEBUGDvpt ifFalse: [ ObjectMemory quit]!

refreshWindow
	builder window controller display!

resetAllCurrentTranslationsModelsAndInfos

	(Dialog confirm: ('Desea ELIMINAR toda la informacion en KRONOware\',
		'y devolver el Modelo y traducciones al estado original ?')withCRs initialAnswer: false)  ifFalse: [ ^self].
	
	(Dialog confirm: ('Realmente desea ELIMINAR toda la informacion en KRONOware\',
		'y devolver el Modelo y traducciones al estado original ?' ) withCRs initialAnswer: false)  ifFalse: [ ^self].
	

Cursor wait showWhile: [ 
	TranslationsPersistencyHolder resetAllCurrentTranslationsNoDialog.
	CMMetaInfoPersistencyHolder resetAllCurrentModelsNoDialog.
	CMInfoPersistencyHolder resetAllCurrentInfosNoDialog.
	CMDefinedUIPersistencyHolder resetAllCurrentDefinedUIsNoDialog.
]!

savePreferences
	self class savePreferences!

saveProject
	^self saveProjectMono!

snapshot
	
	| aPrematureExitBlock aNameRoot aNameTermination aFileSystemMatchString aFileSystemFilePostfixSeparator aMatchTemplate someExistingFileNames anIndex aMaxIndex aNumber aNewIndex aNewFileName aSnapshotName aFilename aDotPosition aDate aTime aMessage |
	aPrematureExitBlock := [
		Dialog warn: 'La grabacion de "instantanea" del estado de KRONOware has sido cancelada'.
		^nil
	].

	(Dialog confirm: 
		'Realmente desea Grabar una instantanea del estado actual de KRONOware ?' initialAnswer: false) ifFalse: [ 
		aPrematureExitBlock value
	].

	aNameRoot := 'KRONOware_instantanea_'.
	aNameTermination := 'im'.
	aFileSystemMatchString := '*'.
	aFileSystemFilePostfixSeparator := '.'.

	aMatchTemplate := aNameRoot, aFileSystemMatchString, aFileSystemFilePostfixSeparator, aNameTermination.

	someExistingFileNames := Filename filesMatching: aMatchTemplate.
	anIndex := someExistingFileNames isEmpty
		ifTrue: [ 0]
		ifFalse: [ 
			someExistingFileNames size > 32 ifTrue: [ 
				Dialog warn: ('Usted ya tiene archivadas ', someExistingFileNames size printString, ' instantaneas.\',
					'Recuerde que estas instantaneas ocupan espacio en disco\',
					'La grabacion de instantanea va a continuar verificando y grabando ...') withCRs.
			].
			aMaxIndex := 0.
			someExistingFileNames do: [:aFileName |
				aNumber := Object errorSignal handle: [:anEx | anEx returnWith: 0]
					do: [ Number readFrom: (aFileName copyFrom: aNameRoot size + 1 to: aFileName size) readStream].
				aNumber > aMaxIndex ifTrue: [ aMaxIndex := aNumber].
			].
			aMaxIndex
		].

	aNewIndex := anIndex.
	[
		aNewIndex := aNewIndex + 1.
		aNewFileName := aNameRoot, aNewIndex printString, aFileSystemFilePostfixSeparator, aNameTermination.
		aNewFileName asFilename exists
	] whileTrue.
	
	[
		aSnapshotName := Dialog request: 'Por favor, introduzca un nombre de fichero instantanea a grabar' initialAnswer: aNewFileName.
		(aSnapshotName isNil or: [ aSnapshotName trimBlanks isEmpty]) ifTrue: [  aPrematureExitBlock value].
		aDotPosition := aSnapshotName indexOf: $..
		aDotPosition > 0 ifTrue: [ aSnapshotName := aSnapshotName copyFrom: 1 to: aDotPosition -1].
	
		aFilename := Object errorSignal 
			handle: [:anEx | anEx returnWith: nil]
			do: [ (aSnapshotName , aFileSystemFilePostfixSeparator, aNameTermination) asFilename].
		aFilename isNil
			ifTrue: [ 
				(Dialog 
					confirm: 'Ha introducido un nombre de fichero incorrecto.\Desea volver a intentarlo ?' withCRs
					initialAnswer: true) ifFalse: [ aPrematureExitBlock value].
				false
			]
			ifFalse: [
				aFilename exists 
					ifTrue: [ 
						(Dialog 
							confirm: 'Ha introducido un nombre de fichero ya existente.\Desea volver a intentarlo ?' withCRs
							initialAnswer: true) ifFalse: [ aPrematureExitBlock value].
						false
					]
					ifFalse: [ true]
			].
	] whileFalse.


	(Dialog confirm: 
		('KRONOware va a grabar una instantanea de su estado en el fichero \\', aSnapshotName ,
		'\ \Desea realmente grabar la instantanea ?') withCRs initialAnswer: true) ifFalse: [  aPrematureExitBlock value].

	self class justReturnedFromSnapshot: false.
	aDate := SpanishDate today.
	aTime:= Time now.

	self panelsTabsModel selectionIndex: 1.
	self panelsTabsModel selectionIndex: 2.

	ObjectMemory verboseGlobalCompactingGC.
	ObjectMemory snapshotAs: aSnapshotName thenQuit: false.

	self class justReturnedFromSnapshot
		ifTrue: [ 
			aMessage :=
				('KRONOware ha sido lanzado desde una instantanea de su estado que fue grabada el\',
				aDate printString , '  a las ' , aTime printString , '\en el fichero \\', aSnapshotName ,
				'\Todas las informaciones y ventanas se encuentran exactamente como estaban en ese momento.') withCRs.
			Dialog warn: aMessage.
			Transcript show: aMessage; cr
		]
		ifFalse:[ 
			aMessage := ('KRONOware ha grabado una instantanea de su estado en el fichero \ \', aSnapshotName ,
				'\ \Por favor tome nota de este nombre y el motivo por el que Usted ha grabado la instantanea\.',
				'Por ejemplo, grabacion del trabajo actual,\',
				'o en caso de una situacion exceptional, por favor tome nota de la relevancia de la situacion o incidencia observada.\',
				'Muchas gracias.') withCRs.
			Dialog warn: aMessage.
			Transcript show: aMessage; cr
		].

		(Delay forMilliseconds: 500) wait.
		self panelsTabsModel selectionIndex: 2.
		self panelsTabsModel selectionIndex: 1.!

techSupport
	KRONOLauncherPanel openWithSpec: #soporteWindowSpec! !

!KRONOPilot publicMethodsFor: 'actions-mono'!

backupProjectExistingSaveFile: theProject

	| aProjectName aBackupProjectPostfix aFileSystemMatchString aNameTermination aMatchTemplate someExistingFileNames anIndex aMaxIndex aNumber aNewIndex aNewFileName aProjectFilePath aProjectFolder aMessage |
	theProject isNil ifTrue: [ ^nil].

	aProjectFilePath := theProject saveFilePath.
	(aProjectFilePath isNil or: [ aProjectFilePath isEmpty]) ifTrue: [ ^nil].
	aProjectFilePath asFilename exists ifFalse: [ ^nil].	

	aProjectFolder := theProject folder.
	aProjectName := theProject name.
	(aProjectName isNil or: [ aProjectName isEmpty]) ifTrue: [ ^nil].

	aBackupProjectPostfix :=  theProject class backupPostfix.
	aFileSystemMatchString := '*'.
	aNameTermination := theProject class savePostfix.

	aMatchTemplate := aProjectFolder , (String with: Filename separator) , 
		aProjectName, aBackupProjectPostfix , aFileSystemMatchString, aNameTermination.

	someExistingFileNames := Filename filesMatching: aMatchTemplate.
	anIndex := someExistingFileNames isEmpty
		ifTrue: [ 0]
		ifFalse: [ 
			aMaxIndex := 0.
			someExistingFileNames do: [:aFileName |
				aNumber := Object errorSignal handle: [:anEx | anEx returnWith: 0]
					do: [ Number readFrom: (aFileName copyFrom: aProjectName size + 1 to: aFileName size) readStream].
				aNumber > aMaxIndex ifTrue: [ aMaxIndex := aNumber].
			].
			aMaxIndex
		].

	aNewIndex := anIndex.
	[
		aNewIndex := aNewIndex + 1.
		aNewFileName := aProjectFolder , (String with: Filename separator) , 
			aProjectName, aBackupProjectPostfix , aNewIndex printString,  aNameTermination.
		aNewFileName asFilename exists
	] whileTrue.

		
	aProjectFilePath asFilename renameTo: aNewFileName.

	aMessage := 'Una Copia de Seguridad\del archivo de la Clinica\' withCRs, aProjectName, '\ha sido guardada en el directorio\' withCRs,
		aProjectFolder, '\en el fichero\' withCRs,
		aProjectName, aBackupProjectPostfix , aNewIndex printString,  aNameTermination.
	Dialog warn: aMessage.
	Transcript show: aMessage; cr!

closeProjectMono
	| aProject  aPrjName |

	self isLogged ifFalse: [^false]. 

	aProject := self currentlyOpenedProject.
	aProject isNil ifTrue: [
		self closeAllEditors.
		self updateMenuAndButtonsBar.
		^true].

	aPrjName := aProject name.

	(Dialog confirm: 'Realmente desea descartar la Clinica actual en KRONOware \' withCRs, 
		aPrjName, ' ?' initialAnswer: false) ifFalse: [^false].

	Cursor wait showWhile: [ self closeAllEditors].

	aProject close.

	self currentlyOpenedProject: nil.
	self updateMenuAndButtonsBar.

	Transcript show: 'Kronoware Project named ', aPrjName, ' discarded.'; cr.

	self systemToCleanState.

	^true!

doLoginMono

	self isLogged ifTrue: [^true].

	^self tryLoginKronoWareMono
		ifTrue: [
			self logged: true.
			Transcript show: 'Usuario ' , (userName isNil ifTrue: [ '?'] ifFalse: [ userName]), 
				' Connectado el' , (Date today printString), ' ', (Time now printString); cr.
			true]
		ifFalse: [ false]!

doLogoutMono
	
	self isLogged ifFalse: [^true]. 

	self closeProjectMono ifFalse: [^false].

	(Dialog confirm: 'Realmente desea abandonar KRONOware ?' initialAnswer: false) ifFalse: [^false].
	
	self cleanUp.
	lastLogoutTime := Time totalSeconds.

	self systemToCleanState.

	^true!

login
	| aUserName |

	aUserName := Dialog request: 'Por favor, introduzca su nombre en KRONOware'  initialAnswer: String new.
	aUserName isNil ifTrue:  [ ^nil].

	aUserName := aUserName trimBlanks.
	aUserName isEmpty ifTrue:  [ ^nil].

	^aUserName!

newProjectMono
	| aProject aPath aMessage |

	self isLogged ifFalse: [^nil]. 

	self closeProjectMono ifFalse: [^nil].
	
	Cursor wait showWhile: [ 
		[
			self panelsTabsModel selectionIndex: 1.
			self panelsTabsModel selectionIndex: 2.
			Transcript show: 'Creando nueva Clinica ...';cr; show: '...Por favor espere un momento (10-20 segundos)';cr.
			aProject := self preferredProjectClass createNewProject.
			aProject isNil 
				ifTrue: [ 
					aMessage :=  ('Ha ocurrido un error creando la nueva clinica.\', 
						'Por favor, tome una instantanea (opcion de menu KRONOware>>Grabar instantanea)\',
						'y contacte el servicio tecnico de KRONOware.',
						'Gracias') withCRs.
					Dialog warn: aMessage.
					Transcript show: aMessage; cr.
					^nil
				]
				ifFalse: [ 
					aMessage :=  ('La nueva Clinica ha sido creada satisfactoriamente.\',
						'Usted puede continuar trabajando.\',
						'Por favor, percatese de que las opciones de menu :',
						'	"Clinica", "Historias" y "Facturacion"\',
						'han sido activadas para su utilizacion') withCRs.
					Dialog warn: aMessage.
					Transcript show: aMessage; cr
				].
		] valueNowOrOnUnwindDo: [ 
			(Delay forMilliseconds: 500) wait.
			self panelsTabsModel selectionIndex: 2.
			self panelsTabsModel selectionIndex: 1.
		]
	].
	aProject isNil ifTrue: [
		self updateMenuAndButtonsBar.
		^nil].

	
	aPath := self defaultPath.
	aPath isNil ifFalse: [ aProject folder: aPath].

	self currentlyOpenedProject: aProject.
	self updateMenuAndButtonsBar.

	Transcript show: 'Nueva Clinica KRONOware ', aProject name, ' creada y abierta. '; 
		show: Time now printString; cr.!

openProjectMono
	| aProject aMessage |

	self isLogged ifFalse: [^nil]. 

	self closeProjectMono ifFalse: [^nil].
	
	Cursor wait showWhile: [ 
		[
			self panelsTabsModel selectionIndex: 1.
			self panelsTabsModel selectionIndex: 2.
			Transcript show: 'Leyendo Clinica ...';cr; show: '...Por favor espere un momento (10-20 segundos)';cr.
			aProject := KRONOProject openProjectMonoInFolder: self defaultPath.
			aProject == false ifTrue: [
				aMessage :=  'El Usuario ha cancelado la lectura de Clinica'.
				Dialog warn: aMessage.
				Transcript show: aMessage; cr.
				^nil
			].
			aProject isNil 
				ifTrue: [ 
					aMessage :=  ('Ha ocurrido un error leyendo la clinica.\', 
						'Por favor, tome una instantanea (opcion de menu KRONOware>>Grabar instantanea)\',
						'y contacte el servicio tecnico de KRONOware.',
						'Gracias') withCRs.
					Dialog warn: aMessage.
					Transcript show: aMessage; cr.
					^nil
				]
				ifFalse: [ 
					aMessage :=  ('La Clinica ha sido leida satisfactoriamente.\',
						'Usted puede continuar trabajando.\',
						'Por favor, percatese de que las opciones de menu :',
						'	"Clinica", "Historias" y "Facturacion"\',
						'han sido activadas para su utilizacion') withCRs.
					Dialog warn: aMessage.
					Transcript show: aMessage; cr
				].
		] valueNowOrOnUnwindDo: [ 
			(Delay forMilliseconds: 500) wait.
			self panelsTabsModel selectionIndex: 2.
			self panelsTabsModel selectionIndex: 1.
		]
	].

	aProject isNil ifTrue: [
		 self updateMenuAndButtonsBar.
		^nil].

	self currentlyOpenedProject: aProject.
	self updateMenuAndButtonsBar.

	Transcript show: 'La Clinica KRONOware llamada ', aProject name ,  ' ha sido cargada. ';
		show: Date today printString; show: Time now printString;cr.!

rememberCurrentUser: theUserName

	self userName: theUserName.!

saveAsProjectMono
	| aProject aFolder aName aMessage aSavePostfix aFileDialogInterface aFilename aFilePath aFilePathFilename |

	self isLogged ifFalse: [^nil]. 

	aProject := self currentlyOpenedProject.
	aProject isNil ifTrue: [
		Dialog warn: 'No hay abierta ninguna Clinica KRONOware'.
		^nil].

	aFolder := aProject folder.
	aFolder isNil ifTrue: [ aFolder := ''].
	aName := aProject saveFileName.
	aName isNil ifTrue: [ aFolder := 'SinNombre'].

	aSavePostfix := KRONOProject savePostfix.

	aFileDialogInterface := FileDialogInterface new.
	aFileDialogInterface isNil ifTrue: [ ^nil].
	aFileDialogInterface titleBarText: 'Grabar Clinica ' , aName.
	aFileDialogInterface addOption: #overwritePrompt.
	aFileDialogInterface fileFilter: ((OrderedCollection new: 1) 
		add:  (Association key:  'Ficheros de Clinicas KRONOware  (*', aSavePostfix, ')' value: '*' ,aSavePostfix); 
		add:  (Association key: 'Todos los ficheros (*.*)' value: '*.*'); 
		yourself).
	aFileDialogInterface fileName:  aName.

	(aFolder isNil not and: [ aFolder isEmpty not]) ifTrue: [
		aFilename := aFolder asFilename.
		(aFilename exists and: [aFilename isDirectory]) ifTrue: [
			aFileDialogInterface initialDirectory: aFolder]].


	aFileDialogInterface openFileDialog == true ifFalse: [ ^false].

	aFilePath := aFileDialogInterface returnedFilePath.
	aFilePath isNil ifTrue: [ ^nil].
	
	aFilePathFilename := aFilePath asFilename.

	aFilePathFilename exists 
		ifTrue: [
			(Dialog confirm: 'Fichero\' withCRs, aFilePath, '\ya existe\' withCRs, 'Desea sobreescribirlo ?\' withCRs,
			' ( nota : sus ventanas se cerraran para facilitar la grabacion )' initialAnswer: true) ifFalse: [ ^nil].
		]
		ifFalse: [
			(Dialog confirm: 'Desea grabar Clinica\' withCRs, 'en el directorio\' withCRs,
			aFilePathFilename head, '\en el fichero\' withCRs, aFilePathFilename tail , ' ?\' withCRs,
			' ( nota : sus ventanas se cerraran para facilitar la grabacion )' initialAnswer: true) ifFalse: [ ^nil].
		].

	self closeAllEditors.
	self removeDanglingDependents.

	Cursor wait showWhile: [ 
		[
			self panelsTabsModel selectionIndex: 1.
			self panelsTabsModel selectionIndex: 2.
			(aProject saveAs: aFilePath) isNil 
				ifTrue: [ 
					aMessage :=  'Ha ocurrido un error grabando la clinica en el fichero\' withCRs, aName, '\' withCRs,
						'Por favor, tome una instantanea (opcion de menu KRONOware>>Grabar instantanea)\' withCRs,
						'y contacte el servicio tecnico de KRONOware.\' withCRs,
						'Gracias\'.
					Dialog warn: aMessage.
					Transcript show: aMessage; cr.
					^nil
				]
				ifFalse: [ 
					aMessage :=  'Clinica KRONOware\' withCRs, aProject name , 
						'\ Grabada en Directorio : \' withCRs,aFilePathFilename head, '\en el fichero\' withCRs, aFilePathFilename tail .
					Dialog warn: aMessage.
					Transcript show: aMessage; cr
				].
		] valueNowOrOnUnwindDo: [ 
			(Delay forMilliseconds: 500) wait.
			self panelsTabsModel selectionIndex: 2.
			self panelsTabsModel selectionIndex: 1.
		]
	].!

saveProjectMono
	| aProject aFolder aName aMessage |

	self isLogged ifFalse: [^nil]. 

	aProject := self currentlyOpenedProject.
	aProject isNil ifTrue: [
		Dialog warn: 'No hay abierta ninguna Clinica KRONOware'.
		^nil].

	aFolder := aProject folder.
	aFolder isNil ifTrue: [ aFolder := ''].
	aName := aProject saveFileName.
	aName isNil ifTrue: [ aName := 'SinNombre'].

	(Dialog confirm: ('Realmente desea Grabar la Clinica KRONOware \' withCRs, aProject name , 
		'\en el Directorio : \' withCRs, aFolder , '\en fichero llamado\' withCRs, aName , ' ?\' withCRs,
		' ( nota : sus ventanas se cerraran para facilitar la grabacion )') ) ifFalse: [^nil].		

	self backupProjectExistingSaveFile: aProject.

	self closeAllEditors.
	self removeDanglingDependents.

	Cursor wait showWhile: [ 
		[
			self panelsTabsModel selectionIndex: 1.
			self panelsTabsModel selectionIndex: 2.
			aProject save isNil 
				ifTrue: [ 
					aMessage :=  'Ha ocurrido un error grabando la clinica en el fichero\' withCRs, aName, '\' withCRs,
						'Por favor, tome una instantanea (opcion de menu KRONOware>>Grabar instantanea)\' withCRs,
						'y contacte el servicio tecnico de KRONOware.\' withCRs,
						'Gracias\'.
					Dialog warn: aMessage.
					Transcript show: aMessage; cr.
					^nil
				]
				ifFalse: [ 
					aMessage :=  'Clinica KRONOware\' withCRs, aProject name , 
						'\ Grabada en Directorio : \' withCRs, aProject folder , '\en fichero llamado\' withCRs, aProject saveFileName.
					Dialog warn: aMessage.
					Transcript show: aMessage; cr
				].
		] valueNowOrOnUnwindDo: [ 
			(Delay forMilliseconds: 500) wait.
			self panelsTabsModel selectionIndex: 2.
			self panelsTabsModel selectionIndex: 1.
		]
	].!

tryLoginKronoWareMono

	| aUserName |
	3 timesRepeat:  [
		aUserName := self login.
		aUserName isNil ifTrue: [ ^false].
		aUserName isEmpty not ifTrue: [
			self rememberCurrentUser: aUserName.
			^true
		]
	].
	^false! !

!KRONOPilot publicMethodsFor: 'aspects'!

panelsModel

	| someCanvases |

	panelsModel isNil ifFalse: [ ^panelsModel].

	someCanvases := OrderedCollection new.
	someCanvases 
		add: KRONOPilotWindowsPanel->#kronoPilotWindowsCanvasSpec;
		add: KRONOPilotMessagesPanel->#kronoPilotMessagesCanvasSpec;
		yourself.

	panelsModel := someCanvases asValue.
	^panelsModel!

panelsTabsModel

	| aTabsList |

	panelsTabsModel isNil ifFalse: [ ^panelsTabsModel].

	aTabsList := List new.
	aTabsList 
		add: 'Ventanas';
		add: 'Mensajes';
		yourself.

	panelsTabsModel := SelectionInList with: aTabsList.

	^panelsTabsModel! !

!KRONOPilot publicMethodsFor: 'constants'!

saveDefaultPathFileName
	^self class saveDefaultPathFileName! !

!KRONOPilot publicMethodsFor: 'initialize-release'!

release

	| aWindowsPanel aMessagesPanel |
	logged isNil ifFalse: [
		logged retractInterestsFor: self].

	logged := nil.
	lastLogoutTime := nil.
	
	currentlyOpenedProject := nil.

	self editorsOpener pilot: nil.
	
	aWindowsPanel := self windowsPanelApplicationModelOrNil.
	aWindowsPanel isNil ifFalse:  [ aWindowsPanel release].

	aMessagesPanel := self messagesPanelApplicationModelOrNil.
	aMessagesPanel isNil ifFalse:  [ aMessagesPanel release].


	^super release! !

!KRONOPilot publicMethodsFor: 'interface opening'!

allButOpenInterface: aSymbol 
	
	| aBuilder aWindowsApplicationModel |
	aBuilder := super allButOpenInterface: aSymbol.

	(self builder componentAt: #panelsTabsID) widget tabBar accelLabelAndIconTab.

	aBuilder window
		application: self; 
		sendWindowEvents: #(#close #release).
	self logged: false.

	self editorsOpener pilot: self.

	KRUIMETAConfiguration initialize.

	self updateMenuAndButtonsBar.

	"self panelsTabsModel selectionIndex: 2.
	self panelsTabsModel selectionIndex: 1."
	
	aWindowsApplicationModel := self windowsPanelApplicationModel.
	aWindowsApplicationModel isNil ifFalse: [ aWindowsApplicationModel updateWindowsListView].

	^aBuilder!

buildButtonsBarWith: theBuilder
	HWUIButtonsBarBuilder new
		buildFor: theBuilder
		buttonsBar: self class buttonsBar
		helpHolder: helpHolder.!

postBuildWith: theBuilder

	| aWindowsApplicationModel |
	self buildButtonsBarWith: theBuilder.

	self logged onChangeSend: #loggedChanged to: self.

	(builder menuAt: #menuBar) helpHolder: self helpHolder.

	aWindowsApplicationModel := self windowsPanelApplicationModelOrNil.
	aWindowsApplicationModel isNil ifFalse: [ aWindowsApplicationModel pilot: self].!

postOpenWith: aBuilder

	| aWindowsApplicationModel |

	(self builder componentAt: #panelsTabsID) widget tabBar accelLabelAndIconTab.

	aBuilder window
		application: self; 
		sendWindowEvents: #(#close #release #enter).
	self logged: false.

	self editorsOpener pilot: self.

	KRUIMETAConfiguration initialize.

	self updateMenuAndButtonsBar.
	
	self panelsTabsModel selectionIndex: 2.
	self panelsTabsModel selectionIndex: 1.
	
	aWindowsApplicationModel := self windowsPanelApplicationModel.
	aWindowsApplicationModel isNil ifFalse: [
		aWindowsApplicationModel pilot: self.
		 aWindowsApplicationModel updateWindowsListView
	].! !

!KRONOPilot publicMethodsFor: 'preferences'!

preferredConfigurationsBrowserClass

	^self class preferredConfigurationsBrowserClass!

preferredEditorsOpenerClass

	^self class preferredEditorsOpenerClass!

preferredProjectClass
	^self class preferredProjectClass! !

!KRONOPilot publicMethodsFor: 'private'!

cleanUp
	self isLogged ifFalse: [^self]. 

	self closeAllEditors.

	self rememberCurrentUser: nil.			
	self logged: false.!

closeAllEditors
	| aGlobalEditorsOpener |
	aGlobalEditorsOpener := self editorsOpener.
	aGlobalEditorsOpener isNil ifFalse: [
		aGlobalEditorsOpener closeAllEditors]!

editorsOpener
	
	^self class editorsOpener!

removeDanglingDependents
	self class removeDanglingDependents!

systemToCleanState

	^self class systemToCleanState! !

!KRONOPilot publicMethodsFor: 'RES - additions'!

privateCopy
	self logged  retractInterestsFor: self.
	^super copy! !

!KRONOPilot publicMethodsFor: 'sub panels'!

messagesPanelApplicationModel
	
	| aPanelsTabsComponent aPanelsTabsWrapper |
	aPanelsTabsWrapper := self builder componentAt: #panelsTabsID.
	aPanelsTabsWrapper isNil ifTrue: [ ^nil].

	aPanelsTabsComponent := aPanelsTabsWrapper component component.
	aPanelsTabsComponent isNil ifTrue: [ ^nil].

	aPanelsTabsComponent cache size < 2 ifTrue: [ 
		(aPanelsTabsComponent builtPageAt: 1) isNil ifTrue: [ aPanelsTabsComponent buildPage: 1].
		(aPanelsTabsComponent builtPageAt: 2) isNil ifTrue: [ aPanelsTabsComponent buildPage: 2].
	].
	aPanelsTabsComponent cache do: [:anAssoc |  | aPanel |
		aPanel := anAssoc value source.
		(aPanel isNil not and: [ aPanel  isKindOf: KRONOPilotMessagesPanel]) ifTrue: [ ^aPanel]
	].
	^nil!

messagesPanelApplicationModelOrNil
	
	| aPanelsTabsComponent aPanelsTabsWrapper |
	aPanelsTabsWrapper := self builder componentAt: #panelsTabsID.
	aPanelsTabsWrapper isNil ifTrue: [ ^nil].

	aPanelsTabsComponent := aPanelsTabsWrapper component component.
	aPanelsTabsComponent isNil ifTrue: [ ^nil].

	aPanelsTabsComponent cache do: [:anAssoc |  | aPanel |
		aPanel := anAssoc value source.
		(aPanel isNil not and: [ aPanel  isKindOf: KRONOPilotMessagesPanel]) ifTrue: [ ^aPanel]
	].
	^nil!

windowsPanelApplicationModel
	
	| aPanelsTabsComponent aPanelsTabsWrapper |
	aPanelsTabsWrapper := self builder componentAt: #panelsTabsID.
	aPanelsTabsWrapper isNil ifTrue: [ ^nil].

	aPanelsTabsComponent := aPanelsTabsWrapper component component.
	aPanelsTabsComponent isNil ifTrue: [ ^nil].

	aPanelsTabsComponent cache size < 2 ifTrue: [ 
		(aPanelsTabsComponent builtPageAt: 1) isNil ifTrue: [ aPanelsTabsComponent buildPage: 1].
		(aPanelsTabsComponent builtPageAt: 2) isNil ifTrue: [ aPanelsTabsComponent buildPage: 2].
	].
	aPanelsTabsComponent cache do: [:anAssoc |  | aPanel |
		aPanel := anAssoc value source.
		(aPanel isNil not and: [ aPanel  isKindOf: KRONOPilotWindowsPanel]) ifTrue: [ ^aPanel]
	].
	^nil!

windowsPanelApplicationModelOrNil
	
	| aPanelsTabsComponent aPanelsTabsWrapper |
	aPanelsTabsWrapper := self builder componentAt: #panelsTabsID.
	aPanelsTabsWrapper isNil ifTrue: [ ^nil].

	aPanelsTabsComponent := aPanelsTabsWrapper component component.
	aPanelsTabsComponent isNil ifTrue: [ ^nil].

	aPanelsTabsComponent cache do: [:anAssoc |  | aPanel |
		aPanel := anAssoc value source.
		(aPanel isNil not and: [ aPanel  isKindOf: KRONOPilotWindowsPanel]) ifTrue: [ ^aPanel]
	].
	^nil! !

!KRONOPilot publicMethodsFor: 'updating'!

applicationWindowEntered
	| anEditorsOpener |
	anEditorsOpener := self editorsOpener.
	anEditorsOpener isNil ifTrue: [ ^self].
	anEditorsOpener applicationWindowEntered: self!

changeRequest

	self doLogoutMono ifFalse: [^false].

	^DEBUGDvpt
		ifTrue: [
			self release.
			true]
		ifFalse: [
			ObjectMemory quit.
			false]!

loggedChanged

	self updateWindowLabel.
	self updateMenuAndButtonsBar.
	self updateWindowsListView!

updateButtonsBar
	^self updateMonoButtonsBar!

updateMenu
	^self updateMonoMenu!

updateMenuAndButtonsBar
	| menu |
	self updateMenu.
	self updateButtonsBar.
	menu := self builder menuAt: #menuBar.
	HWUIButtonsBarBuilder new
		updateMenuItems: menu
		fromBar: self class buttonsBar!

updateMonoButtonsBar

	|   someButtons |
	someButtons := (self builder componentAt: #BUTTONSBAR) widget components.
	self isLogged
		ifFalse: [
			(someButtons at: self class newProjectButtonIndex) disable.
			(someButtons at: self class openProjectButtonIndex) disable.
			(someButtons at: self class saveProjectButtonIndex) disable]
		ifTrue: [
			(someButtons at: self class newProjectButtonIndex) enable.
			(someButtons at: self class openProjectButtonIndex) enable.
			self currentlyOpenedProject isNil 
				ifTrue: [ (someButtons at: self class saveProjectButtonIndex) disable]
				ifFalse: [ (someButtons at: self class saveProjectButtonIndex) enable]]!

updateMonoMenu
	| aMenu  aMenuItem aKronoWareMenu someMenuButtons aSistemaMenu |
	aMenu := self builder menuAt: #menuBar.
	aKronoWareMenu := aMenu valueAt: self class kronoWareMenuIndex.
	aSistemaMenu := aMenu valueAt: self class sistemaMenuIndex.
	self isLogged
		ifFalse: [
			aMenuItem := aKronoWareMenu  menuItemAt: self class kronoWareLoginLogoutMonoMenuItemIndex.
			aMenuItem label: self class loginMonoMenuItemLabel.
			aKronoWareMenu helpAt: self class kronoWareLoginLogoutMonoMenuItemIndex  put: self class loginMonoMenuItemHelp.
			aKronoWareMenu valueAt: self class kronoWareLoginLogoutMonoMenuItemIndex  put: self class loginMonoMenuItemSelector.
			aKronoWareMenu 		disableIndexes: self class kronoWarePostLoginMonoMenuItemIndexes.
			aKronoWareMenu 		disableIndexes: self class kronoWarePostOpenMonoMenuItemIndexes.
			aSistemaMenu 			disableIndexes: self class sistemaPostLoginMonoMenuItemIndexes.
			aSistemaMenu 			disableIndexes: self class sistemaPostOpenMonoMenuItemIndexes.
			aMenu 					disableIndexes: self class postLoginMonoMenuItemIndexes.
			aMenu 					disableIndexes: self class postOpenMonoMenuItemIndexes.

			someMenuButtons := self builder keyboardProcessor menuBar menuButtons.
			self class postLoginMonoMenuItemIndexes do: [:anIndex | (someMenuButtons at: anIndex) isEnabled: false].
			self class postOpenMonoMenuItemIndexes do: [:anIndex | (someMenuButtons at: anIndex) isEnabled: false].

		]
		ifTrue: [

			aMenu enableIndexes: self class postLoginMonoMenuItemIndexes.

			someMenuButtons := self builder keyboardProcessor menuBar menuButtons.
			self class postLoginMonoMenuItemIndexes do: [:anIndex | (someMenuButtons at: anIndex) isEnabled: true].

			aMenuItem := aKronoWareMenu  menuItemAt: self class kronoWareLoginLogoutMonoMenuItemIndex.
			aMenuItem label: self class logoutMonoMenuItemLabel.
			aKronoWareMenu helpAt: self class kronoWareLoginLogoutMonoMenuItemIndex  put: self class logoutMonoMenuItemHelp.
			aKronoWareMenu valueAt: self class kronoWareLoginLogoutMonoMenuItemIndex  put: self class logoutMonoMenuItemSelector.

			aKronoWareMenu enableIndexes: self class kronoWarePostLoginMonoMenuItemIndexes.
			aSistemaMenu enableIndexes: self class sistemaPostLoginMonoMenuItemIndexes.

			self currentlyOpenedProject isNil 
				ifTrue: [
					aKronoWareMenu disableIndexes: self class kronoWarePostOpenMonoMenuItemIndexes.
					aSistemaMenu disableIndexes: self class sistemaPostOpenMonoMenuItemIndexes.
					aMenu disableIndexes: self class postOpenMonoMenuItemIndexes.
					self class postOpenMonoMenuItemIndexes do: [:anIndex | (someMenuButtons at: anIndex) isEnabled: false].

				]
				ifFalse: [
					aKronoWareMenu enableIndexes: self class kronoWarePostOpenMonoMenuItemIndexes.
					aSistemaMenu enableIndexes: self class sistemaPostOpenMonoMenuItemIndexes.
					aMenu enableIndexes: self class postOpenMonoMenuItemIndexes.
					self class postOpenMonoMenuItemIndexes do: [:anIndex | (someMenuButtons at: anIndex) isEnabled: true].
				].



		]!

updateWindowLabel

	| aUserName |
	aUserName := self userName.
	self builder window label: 
		'Menu KRONOware', (( aUserName isNil or: [aUserName isEmpty]) ifTrue: [ ' (desconectado)'] ifFalse: [ ' para Usuario ', aUserName])!

updateWindowsList

	self updateWindowsListView.!

updateWindowsListMenu

	| aMenu aWindowsListMenu |
	aMenu := self builder menuAt: #menuBar.
	aWindowsListMenu := aMenu valueAt: self class listWindowsMenuIndex.
	aWindowsListMenu buildMenu.!

updateWindowsListSelection

	| aWindowsListApplicationModel |

	aWindowsListApplicationModel := self windowsPanelApplicationModel.
	aWindowsListApplicationModel isNil ifTrue: [ ^self].

	aWindowsListApplicationModel updateWindowsListSelection!

updateWindowsListView

	| aWindowsListApplicationModel |

	alreadyUpdatedAfterOpening == true ifFalse: [ 
		(self builder window isNil not and: [ self builder window isOpen]) ifTrue: [ 
			self panelsTabsModel selectionIndex: 2.
			self panelsTabsModel selectionIndex: 1.
			alreadyUpdatedAfterOpening := true
		]
	].

	aWindowsListApplicationModel := self windowsPanelApplicationModel.
	aWindowsListApplicationModel isNil ifTrue: [ ^self].

	aWindowsListApplicationModel updateWindowsListView!

updateWindowsSelection
	
	self updateWindowsListSelection.!

windowEvent: theEvent from: theWindow

	super windowEvent: theEvent from: theWindow.

	(#(#enter ) includes: theEvent key) ifTrue: [
		self applicationWindowEntered.
		^self].! !

!KRONOPilotMessagesPanel class publicMethodsFor: 'interface specs'!

kronoPilotMessagesCanvasSpec
	"UIPainter new openOnClass: self andSelector: #kronoPilotMessagesCanvasSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware Mensajes' 
			#min: #(#Point 388 145 ) 
			#bounds: #(#Rectangle 275 325 817 566 ) 
			#colors: 
			#(#LookPreferences 
				#setForegroundColor: #(#ColorValue #black ) 
				#setBackgroundColor: #(#ColorValue #white ) 
				#setSelectionForegroundColor: #(#ColorValue #white ) 
				#setSelectionBackgroundColor: #(#ColorValue #black ) 
				#setBorderColor: #(#ColorValue #black ) ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#RegionSpec 
					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 ) 
					#isOpaque: true 
					#colors: 
					#(#LookPreferences 
						#setBackgroundColor: #(#ColorValue #white ) 
						#setHiliteColor: #(#ColorValue #gray ) 
						#setShadowColor: #(#ColorValue #black ) ) 
					#lineWidth: 0 ) 
				#(#ArbitraryComponentSpec 
					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 ) 
					#name: #messageViewID 
					#flags: 9 
					#component: #messageView ) ) ) )! !

!KRONOPilotMessagesPanel publicMethodsFor: 'aspects'!

messageView
	|  aMenu |

	messageView isNil ifFalse: [^messageView].

	messageView := TextCollectorView new model: Transcript.
	messageView controller: TextEditorController new.
	messageView controller keyboardProcessor: builder keyboardProcessor.
	aMenu := HWHelpPopUpMenu labelList: #(#(#copy "#cut" ) #(#clear ) )  values: #(#copySelection "#cut" #cancel ).

	messageView  controller menuHolder: (ValueHolder with: aMenu).

	^messageView! !

!KRONOPilotMessagesPanel publicMethodsFor: 'initialize-release'!

release
	
	messageView isNil ifFalse: [ Transcript  removeDependent: messageView].
	messageView := nil.

	^super release! !

!KRONOPilotMessagesPanel publicMethodsFor: 'interface opening'!

postOpenWith: theBuilder
	(theBuilder componentAt: #messageViewID) widget controller cancel.! !

!KRONOPilotWindowsPanel class publicMethodsFor: 'interface specs'!

kronoPilotWindowsCanvasSpec
	"UIPainter new openOnClass: self andSelector: #kronoPilotWindowsCanvasSpec"

	<resource: #canvas>
	^#(#FullSpec 
		#window: 
		#(#WindowSpec 
			#label: 'KRONOware lista de Ventanas' 
			#min: #(#Point 388 145 ) 
			#bounds: #(#Rectangle 254 333 796 574 ) 
			#colors: 
			#(#LookPreferences 
				#setForegroundColor: #(#ColorValue #black ) 
				#setBackgroundColor: #(#ColorValue #white ) 
				#setSelectionForegroundColor: #(#ColorValue #white ) 
				#setSelectionBackgroundColor: #(#ColorValue #black ) 
				#setBorderColor: #(#ColorValue #black ) ) 
			#isEventDriven: true ) 
		#component: 
		#(#SpecCollection 
			#collection: #(
				#(#SequenceViewSpec 
					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 ) 
					#name: #windowsListID 
					#isOpaque: true 
					#model: #windowsList 
					#selectionType: #highlight ) ) ) )! !

!KRONOPilotWindowsPanel publicMethodsFor: 'accessing'!

pilot
	^pilot!

pilot: thePilot
	pilot := thePilot! !

!KRONOPilotWindowsPanel publicMethodsFor: 'aspects'!

windowsList
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."

	^windowsList isNil
		ifTrue:
			[windowsList := SelectionInList new]
		ifFalse:
			[windowsList]! !

!KRONOPilotWindowsPanel publicMethodsFor: 'initialize-release'!

release
	
	windowsList isNil ifFalse: [ windowsList release].
	windowsList := nil.

	^super release! !

!KRONOPilotWindowsPanel publicMethodsFor: 'interface opening'!

postBuildWith: theBuilder

	(theBuilder componentAt: #windowsListID) widget displayStringSelector: #label.
	self windowsList selectionIndexHolder onChangeSend: #windowsListSelectionChanged to: self! !

!KRONOPilotWindowsPanel publicMethodsFor: 'updating'!

animateZoomDuration
	^KRUIMETAConfiguration current getParameter: #animateZoomDuration default: 200!

animateZoomToWindow: theWindow
	| aZoomInitRectangle aZoomEndRectangle aDuration |

	aDuration := self animateZoomDuration.
	aDuration < 1 ifTrue:  [ ^self].

	aZoomInitRectangle := Window currentWindow globalOrigin +  Window currentWindow sensor cursorPoint extent: 2@2.
	aZoomEndRectangle := theWindow displayBox.
	Screen default zoom: aZoomInitRectangle to: aZoomEndRectangle duration: 200.!

animateZoomToWindowCursor: theWindow
	| aZoomInitRectangle aZoomEndRectangle aDuration |

	aDuration := self animateZoomDuration.
	aDuration < 1 ifTrue:  [ ^self].

	aZoomInitRectangle := theWindow displayBox.
	aZoomEndRectangle := theWindow globalOrigin +  theWindow sensor cursorPoint extent: 2@2.
	Screen default zoom: aZoomInitRectangle to: aZoomEndRectangle  duration: 200.!

updateWindowsListSelection

	| aGlobalEditorsOpener someWindows aLastEditorEntered aLastWindowEntered |

	pilot isNil ifTrue: [ ^self].

	aGlobalEditorsOpener := pilot editorsOpener.
	someWindows := self windowsList list.

	aLastEditorEntered := aGlobalEditorsOpener lastEditorEntered.
	aLastEditorEntered isNil ifFalse: [ 
		aLastWindowEntered := aLastEditorEntered builder window.
		(someWindows includes: aLastWindowEntered ) ifTrue: [ 
			inTransition == true ifFalse: [ 
				[
					inTransition := true.
					self windowsList selection: aLastWindowEntered.
				] valueNowOrOnUnwindDo: [ inTransition := false]				
			]
		]
	]!

updateWindowsListView

	| aGlobalEditorsOpener someWindows aLastEditorEntered aLastWindowEntered someWindowsSorted |

	pilot isNil ifTrue: [ ^self].

	aGlobalEditorsOpener := pilot editorsOpener.
	someWindows := aGlobalEditorsOpener isNil
		ifTrue: [#() copy]
		ifFalse: [ aGlobalEditorsOpener allWindows asArray].

	someWindowsSorted := someWindows asSortedCollection: [:a :b | a label < b label].

	self windowsList list: someWindowsSorted.

	aLastEditorEntered := aGlobalEditorsOpener lastEditorEntered.
	aLastEditorEntered isNil ifFalse: [ 
		aLastWindowEntered := aLastEditorEntered builder window.
		(someWindows includes: aLastWindowEntered ) ifTrue: [ 
			inTransition == true ifFalse: [ 
				[
					inTransition := true.
					self windowsList selection: aLastWindowEntered.
				] valueNowOrOnUnwindDo: [ inTransition := false]				
			]
		]
	]!

windowsListSelectionChanged
	
	| aWindow |
	aWindow := self windowsList selection.
	aWindow isNil ifTrue: [ ^self].

	pilot isNil  ifTrue: [ ^nil].
	inTransition == true ifTrue: [ ^nil].

	aWindow isOpen
		ifFalse: [ Dialog warn: 'La ventana KRONOware ', aWindow label, ' ya ha sido cerrada']
		ifTrue: [
			aWindow isCollapsed ifTrue: [aWindow expand].
			self animateZoomToWindow: aWindow.
			aWindow raise.
			(aWindow bounds containsPoint: aWindow sensor cursorPoint) ifFalse: [
				aWindow sensor cursorPoint: 120@70.
			].
			self animateZoomToWindowCursor: aWindow.
		]! !

!KRONO_Launch class publicMethodsFor: 'ENVY'!

loaded
	KRONOPilot initialize! !

KRONOLauncher initializeAfterLoad!
KRONOLauncherPanel initializeAfterLoad!
KRONOPilotMessagesPanel initializeAfterLoad!
KRONOPilotWindowsPanel initializeAfterLoad!
KRONOPilot initializeAfterLoad!
KRONO_Launch initializeAfterLoad!

KRONO_Launch loaded!
